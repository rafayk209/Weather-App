{"version":3,"sources":["logo.svg","componenets/weatherdisplay.js","componenets/weather.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayWeather","props","data","iconurl","cod","weather","icon","className","Fragment","name","sys","country","Date","toLocaleTimeString","Math","floor","main","temp","src","alt","srcset","temp_max","temp_min","humidity","pressure","visibility","wind","speed","deg","sunrise","sunset","message","useStyles","makeStyles","theme","root","display","flexWrap","margin","spacing","createTheme","palette","primary","blue","Weather","useState","setWeather","city","form","setForm","APIKEY","e","a","preventDefault","alert","fetch","then","res","json","ThemeProvider","TextField","label","onChange","target","value","handleChange","variant","id","Button","onClick","weatherData","undefined","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0552da6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport \"./weatherdisplay.css\"\r\n\r\nfunction DisplayWeather(props) {\r\n  const { data } = props;\r\n  const iconurl =\r\n    \"http://openweathermap.org/img/wn/\" +\r\n    `${data.cod != 404 ? data.weather[0].icon : null}` +\r\n    \".png\";\r\n  return (\r\n    <div className=\"displayweather\">\r\n      {data.cod != 404 ? (\r\n        <React.Fragment>\r\n          <div className=\"maincard\">\r\n            <span className=\"cardtitle\">\r\n              {data.name} , {data.sys.country} \r\n            </span> <br/>Weather time \r\n            <span className=\"cardsubtitle\">\r\n              : {new Date().toLocaleTimeString()}\r\n            </span>\r\n\r\n            <h1 className=\"temp\">\r\n              {\" \"}\r\n              {Math.floor(data.main.temp - 273.15)}\r\n              <sup>o</sup>\r\n            </h1>\r\n            <span className=\"weather-description\">{data.weather[0].main}</span><br/><br/>\r\n            <img className=\"weather-icon\" src={iconurl} alt=\"\" srcset=\"\" />\r\n            \r\n          </div> <br/>\r\n          <div className=\"weatherdetails\">\r\n            {/* <div className=\"section1\">\r\n              <table>\r\n                <tr>\r\n                  <td>\r\n                    <h4>High/Low</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>\r\n                      {Math.floor(data.main.temp_max - 273.15)}/\r\n                      {Math.floor(data.main.temp_min - 273.15)}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Humidity</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>{data.main.humidity} %</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Pressure</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>{data.main.pressure} hPa</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Visibility</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>{data.visibility / 1000} Km</span>\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            </div> */}\r\n            </div>\r\n\r\n\r\n            <div className=\"section2\">\r\n              <table className=\"tableDetail\">\r\n                <tr className=\"rowheadDetail\">\r\n                  <th className=\"colDetail\">High/Low</th>\r\n                  <th className=\"colDetail\">Humidity</th>\r\n                  <th className=\"colDetail\">Pressure</th>\r\n                  <th className=\"colDetail\">Visibility</th>\r\n                  {/* <th className=\"colDetail\">Wind</th>\r\n                  <th className=\"colDetail\">Wind Direction</th>\r\n                  <th className=\"colDetail\">Sunrise</th>\r\n                  <th className=\"colDetail\">Sunset</th> */}\r\n                </tr>\r\n                <tr className=\"rowDetail\">\r\n                <td className=\"colDetail\">\r\n                    <span>\r\n                      {Math.floor(data.main.temp_max - 273.15)}/\r\n                      {Math.floor(data.main.temp_min - 273.15)}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"colDetail\">\r\n                    <span>{data.main.humidity} %</span>\r\n                  </td>\r\n                  <td className=\"colDetail\">\r\n                    <span>{data.main.pressure} hPa</span>\r\n                  </td>\r\n                  <td className=\"colDetail\">\r\n                    <span>{data.visibility / 1000} Km</span>\r\n                  </td>\r\n                  {/* <td className=\"colDetail\">\r\n                    <span>{Math.floor((data.wind.speed * 18) / 5)} km/hr</span>\r\n                  </td>\r\n                  <td className=\"colDetail\">\r\n                    <span>\r\n                      {data.wind.deg}\r\n                      <sup>o</sup> deg\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"colDetail\">\r\n                    <span>\r\n                      {new Date(data.sys.sunrise * 1000).toLocaleTimeString()}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"colDetail\">\r\n                    <span>\r\n                      {new Date(data.sys.sunset * 1000).toLocaleTimeString()}\r\n                    </span>\r\n                  </td> */}\r\n                </tr>\r\n                <tr className=\"rowheadDetail\">\r\n                  {/* <th className=\"colDetail\">High/Low</th>\r\n                  <th className=\"colDetail\">Humidity</th>\r\n                  <th className=\"colDetail\">Pressure</th>\r\n                  <th className=\"colDetail\">Visibility</th> */}\r\n                  <th className=\"colDetail\">Wind</th>\r\n                  <th className=\"colDetail\">Wind Direction</th>\r\n                  <th className=\"colDetail\">Sunrise</th>\r\n                  <th className=\"colDetail\">Sunset</th>\r\n                </tr>\r\n                <tr className=\"rowDetail\">\r\n                {/* <td className=\"colDetail\">\r\n                    <span>\r\n                      {Math.floor(data.main.temp_max - 273.15)}/\r\n                      {Math.floor(data.main.temp_min - 273.15)}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"colDetail\">\r\n                    <span>{data.main.humidity} %</span>\r\n                  </td>\r\n                  <td className=\"colDetail\">\r\n                    <span>{data.main.pressure} hPa</span>\r\n                  </td>\r\n                  <td className=\"colDetail\">\r\n                    <span>{data.visibility / 1000} Km</span>\r\n                  </td> */}\r\n                  <td className=\"colDetail\">\r\n                    <span>{Math.floor((data.wind.speed * 18) / 5)} km/hr</span>\r\n                  </td>\r\n                  <td className=\"colDetail\">\r\n                    <span>\r\n                      {data.wind.deg}\r\n                      <sup>o</sup> deg\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"colDetail\">\r\n                    <span>\r\n                      {new Date(data.sys.sunrise * 1000).toLocaleTimeString()}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"colDetail\">\r\n                    <span>\r\n                      {new Date(data.sys.sunset * 1000).toLocaleTimeString()}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n              {/* <table>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Wind</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>{Math.floor((data.wind.speed * 18) / 5)} km/hr</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Wind Direction</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>\r\n                      {data.wind.deg}\r\n                      <sup>o</sup> deg\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Sunrise</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>\r\n                      {new Date(data.sys.sunrise * 1000).toLocaleTimeString()}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Sunset</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>\r\n                      {new Date(data.sys.sunset * 1000).toLocaleTimeString()}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n              </table> */}\r\n             \r\n\r\n\r\n           \r\n          </div>\r\n        </React.Fragment>\r\n      ) : (\r\n        <div className=\"maincard\">\r\n          <h2>{data.message}</h2>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisplayWeather;","import React, { useState } from \"react\";\r\nimport DisplayWeather from \"./weatherdisplay\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./weather.css\"\r\n\r\nimport {\r\n  alpha,\r\n  ThemeProvider,\r\n  withStyles,\r\n  makeStyles,\r\n  createTheme,\r\n} from '@material-ui/core/styles';\r\n\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { blue } from '@material-ui/core/colors';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: blue,\r\n  },\r\n});\r\n\r\nfunction Weather() {\r\n  const classes = useStyles();\r\n  const [weather, setWeather] = useState([]);\r\n  const [form, setForm] = useState({\r\n    city: \"\",\r\n  });\r\n\r\n  const APIKEY = \"cb394156df105c433c693903afdbdafd\";\r\n  async function weatherData(e) {\r\n    e.preventDefault();\r\n    if (form.city == \"\") {\r\n      alert(\"Add values\");\r\n    } else {\r\n      const data = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${form.city},${form.country}&APPID=${APIKEY}`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => data);\r\n\r\n      setWeather({ data: data });\r\n    }\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n\r\n    if (name == \"city\") {\r\n      setForm({ ...form, city: value });\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"weather\">\r\n      <h1 className=\"title\">Weather App</h1>\r\n      <br />\r\n      {/* <form>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"city\"\r\n          name=\"city\"\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n        &nbsp; &nbsp; &nbsp;&nbsp;\r\n        \r\n        <button className=\"getweather\" onClick={(e) => weatherData(e)}>\r\n          Submit\r\n        </button>\r\n      </form> */}\r\n      <form>\r\n    <div className=\"formset\">\r\n    <ThemeProvider theme={theme}>\r\n      \r\n      <TextField \r\n        className=\"search\"\r\n        name=\"city\"\r\n        label=\"City Name\"\r\n        onChange={(e) => handleChange(e)}\r\n        variant=\"outlined\"\r\n        id=\"mui-theme-provider-outlined-input\"\r\n      />\r\n    </ThemeProvider>\r\n    <Button className=\"searchbtn\" onClick={(e) => weatherData(e)} variant=\"outlined\">Search</Button>\r\n    </div>\r\n  </form>\r\n  <br/>\r\n\r\n      {/* {console.log(weather)} */}\r\n      {weather.data != undefined ? (\r\n        <div>\r\n          <DisplayWeather data={weather.data} />\r\n        </div>\r\n      ) : null}\r\n      \r\n    </div>\r\n  //   <form className={classes.root} noValidate>\r\n  //   <div className=\"formset\">\r\n  //   <ThemeProvider theme={theme}>\r\n      \r\n  //     <TextField \r\n  //       className=\"search\"\r\n  //       label=\"City Name\"\r\n  //       onChange={(e) => handleChange(e)}\r\n  //       variant=\"outlined\"\r\n  //       id=\"mui-theme-provider-outlined-input\"\r\n  //     />\r\n  //   </ThemeProvider>\r\n  //   <Button className=\"searchbtn\" onClick={(e) => weatherData(e)} variant=\"outlined\">Search</Button>\r\n  //   </div>\r\n  // </form>\r\n  \r\n    );\r\n}\r\n\r\nexport default Weather;","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport Weather from \"./componenets/weather\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Weather/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}